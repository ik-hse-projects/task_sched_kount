diff --git a/fs/proc/base.c b/fs/proc/base.c
index b3422cda2..21575a538 100644
--- a/fs/proc/base.c
+++ b/fs/proc/base.c
@@ -487,6 +487,20 @@ static int proc_pid_schedstat(struct seq_file *m, struct pid_namespace *ns,
 }
 #endif
 
+#ifdef CONFIG_TASK_SCHEDULED_COUNT
+/*
+ * Provides /proc/PID/schedcount
+ */
+static int proc_pid_schedcount(struct seq_file *m, struct pid_namespace *ns,
+			      struct pid *pid, struct task_struct *task)
+{
+	seq_printf(m, "%llu\n",
+	   (unsigned long long)task->task_scheduled_count);
+
+	return 0;
+}
+#endif
+
 #ifdef CONFIG_LATENCYTOP
 static int lstats_show_proc(struct seq_file *m, void *v)
 {
@@ -3215,6 +3229,9 @@ static const struct pid_entry tgid_base_stuff[] = {
 #ifdef CONFIG_SCHED_INFO
 	ONE("schedstat",  S_IRUGO, proc_pid_schedstat),
 #endif
+#ifdef CONFIG_TASK_SCHEDULED_COUNT
+	ONE("schedcount", S_IRUGO, proc_pid_schedcount),
+#endif
 #ifdef CONFIG_LATENCYTOP
 	REG("latency",  S_IRUGO, proc_lstats_operations),
 #endif
@@ -3557,6 +3574,9 @@ static const struct pid_entry tid_base_stuff[] = {
 #ifdef CONFIG_SCHED_INFO
 	ONE("schedstat", S_IRUGO, proc_pid_schedstat),
 #endif
+#ifdef CONFIG_TASK_SCHEDULED_COUNT
+	ONE("schedcount", S_IRUGO, proc_pid_schedcount),
+#endif
 #ifdef CONFIG_LATENCYTOP
 	REG("latency",  S_IRUGO, proc_lstats_operations),
 #endif
diff --git a/include/linux/sched.h b/include/linux/sched.h
index 6e3a5eeec..81a5e44e1 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -1368,6 +1368,10 @@ struct task_struct {
 	struct llist_head               kretprobe_instances;
 #endif
 
+#ifdef CONFIG_TASK_SCHEDULED_COUNT
+	unsigned long long              task_scheduled_count;
+#endif
+
 	/*
 	 * New fields for task_struct should be added above here, so that
 	 * they are included in the randomized portion of task_struct.
diff --git a/init/Kconfig b/init/Kconfig
index a3d27421d..c40e65840 100644
--- a/init/Kconfig
+++ b/init/Kconfig
@@ -565,6 +565,14 @@ config TASKSTATS
 
 	  Say N if unsure.
 
+config TASK_SCHEDULED_COUNT
+	bool "Count how many times task was scheduled"
+	default n
+	help
+	  Counter is exported through /proc/<pid>/schedcount
+
+	  Say N if unsure.
+
 config TASK_DELAY_ACCT
 	bool "Enable per-task delay accounting"
 	depends on TASKSTATS
diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index f0056507a..099e4f47c 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -5103,6 +5103,10 @@ static inline void sched_submit_work(struct task_struct *tsk)
 	if (!tsk->state)
 		return;
 
+#ifdef CONFIG_TASK_SCHEDULED_COUNT
+	tsk->task_scheduled_count++;
+#endif
+
 	task_flags = tsk->flags;
 	/*
 	 * If a worker went to sleep, notify and ask workqueue whether
